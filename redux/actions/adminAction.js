import { GET_ALL_ACCOUNT, CREATE_ACCOUNT, DELETE_ACCOUNT } from "../types/adminType";
import {openLoadingAction, closeLoadingAction} from "./loaderAction";
import {accountsServices} from "../../services/servicesAPI";
import {HTTP_200} from "../../services/define_HTTP";
import {snackActions} from "../../helper/showSnackBar";

// ƒê·ªãnh nghƒ©a Type v√† d·ªØ li·ªáu ƒë·∫©y l√™n

// L·∫•y data account
export const getAllAccountsActions = (dataAccounts) => ({
    type: GET_ALL_ACCOUNT,
    dataAccounts,
});

// Thi·∫øt l·∫≠p action call api trong n√†y

// Call API d·ªØ li·ªáu account
export const getDataAccounts = () => async dispatch => {
    try{
        dispatch(openLoadingAction())
        const res = await accountsServices.getAllDataAccountsServices()
        if(res.status === HTTP_200 && res.data.status){
            dispatch(closeLoadingAction())
            let dataAccount = res.data.data
            dataAccount = dataAccount.map((item, index) => {
                return {...item, id: index}
            })
            dispatch(getAllAccountsActions(dataAccount));
        }else{
            snackActions.error('T·∫£i d·ªØ li·ªáu account th·∫•t b·∫°i')
            dispatch(closeLoadingAction())
        }
    }catch (e) {
        dispatch(closeLoadingAction())
        snackActions.error('T·∫£i d·ªØ li·ªáu account th·∫•t b·∫°i')
    }
};

// Call API th√™m m·ªõi account
export const addAccount = (dataNewAccount) => async dispatch => {
    try{
        dispatch(openLoadingAction())
        const res = await accountsServices.addNewAccountServices({
            "username": dataNewAccount.username,
            "password": dataNewAccount.password,
            "role": dataNewAccount.id_role,
            "id_place": dataNewAccount.id_place,
            "active_acc": false
        })
        if(res.status === HTTP_200 && res.data.status){
            const reloadData = await accountsServices.getAllDataAccountsServices()
            console.log(reloadData)
            if(reloadData.status === HTTP_200 && reloadData.data.status){
                dispatch(closeLoadingAction())
                let dataAccount = reloadData.data.data
                dataAccount = dataAccount.map((item, index) => {
                return {...item, id: index}
                })
                dispatch(getAllAccountsActions(dataAccount));
            }
            return true
        }else{
            dispatch(closeLoadingAction())
            return false
        }
    }catch (e){
        dispatch(closeLoadingAction())
        return false
    }
}

// Call API x√≥a account
export const deleteAccount = (idAccount) => async dispatch => {
    try{
        dispatch(openLoadingAction())
        const res = await accountsServices.deleteAccountServices(idAccount)
        if(res.status === HTTP_200 && res.data.status){
            snackActions.success('X√≥a account th√†nh c√¥ng üéâ')
            const reloadData = await accountsServices.getAllDataAccountsServices()
            if(reloadData.status === HTTP_200 && reloadData.data.status){
                dispatch(closeLoadingAction())
                let dataAccount = reloadData.data.data
                dataAccount = dataAccount.map((item, index) => {
                return {...item, id: index}
                })
                dispatch(getAllAccountsActions(dataAccount));
            }
            return true
        }else{
            snackActions.error('X√≥a th·∫•t b·∫°i, h·ªá th·ªëng ƒëang g·∫∑p v·∫•n ƒë·ªÅ')
            dispatch(closeLoadingAction())
            return false
        }
    }catch (e) {
        snackActions.error('X√≥a th·∫•t b·∫°i, h·ªá th·ªëng ƒëang g·∫∑p v·∫•n ƒë·ªÅ')
        dispatch(closeLoadingAction())
        return false
    }
}