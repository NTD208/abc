import {useEffect, useState} from "react";
import {useRouter} from 'next/router';
import {connect} from "react-redux";

import RegisterStyle from "./RegisterStyle.module.scss"
import TextField from '@mui/material/TextField';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Button from '@mui/material/Button';
import MenuItem from '@mui/material/MenuItem';
import {getAllVaccinationPlace} from "../../../redux/actions/vaccinationPlaceAction";
import {validationInvalid} from "../../../helper/validate/validation";
import {snackActions} from "../../../helper/showSnackBar";
import {registrationVaccinationAction} from "../../../redux/actions/registrationVaccinationAction";

export const dataPriorities = [
    {
        "id_priority": 1,
        "name_priority": "Ng∆∞·ªùi l√†m vi·ªác trong c∆° s·ªü y t·∫ø"
    },
    {
        "id_priority": 2,
        "name_priority": "Ng∆∞·ªùi tham gia ph√≤ng ch·ªëng d·ªãch"
    },
    {
        "id_priority": 3,
        "name_priority": "L·ª±c l∆∞·ª£ng qu√¢n ƒë·ªôi"
    },
    {
        "id_priority": 4,
        "name_priority": "L·ª±c l∆∞·ª£ng c√¥ng an"
    },
    {
        "id_priority": 5,
        "name_priority": "Nh√¢n vi√™n c√°n b·ªô ngo·∫°i giao Vi·ªát Nam"
    },
    {
        "id_priority": 6,
        "name_priority": "C√°n b·ªô h·∫£i quan l√†m c√¥ng t√°c xu·∫•t nh·∫≠p c·∫£nh"
    },
    {
        "id_priority": 7,
        "name_priority": "Ng∆∞·ªùi cung c·∫•p d·ªãch v·ª• thi·∫øt y·∫øu: h√†ng kh√¥ng, v·∫≠n t·∫£i, y t·∫ø"
    },
    {
        "id_priority": 8,
        "name_priority": "Gi√°o vi√™n, h·ªçc sinh, sinh vi√™n"
    },
    {
        "id_priority": 9,
        "name_priority": "Ng∆∞·ªùi m·∫Øc b·ªánh m√£n t√≠nh, tr√™n 65 tu·ªïi"
    },
    {
        "id_priority": 10,
        "name_priority": "Ng∆∞·ªùi s·ªëng t·∫°i v√πng c√≥ d·ªãch"
    },
    {
        "id_priority": 11,
        "name_priority": "Ng∆∞·ªùi ngh√®o c√°c ƒë·ªëi t∆∞·ª£ng ch√≠nh s√°ch x√£ h·ªôi"
    },
    {
        "id_priority": 12,
        "name_priority": "C√°c ƒë·ªëi t∆∞·ª£ng lao ƒë·ªông t·∫°i c√°c c∆° s·ªü doanh nghi·ªáp"
    },
    {
        "id_priority": 13,
        "name_priority": "C√°c ch·ª©c s·∫Øc ch·ª©c vi·ªác t√¥n gi√°p"
    },
    {
        "id_priority": 14,
        "name_priority": "Ng∆∞·ªùi lao ƒë·ªông t·ª± do"
    },
    {
        "id_priority": 15,
        "name_priority": "C√°c ƒë·ªëi t∆∞·ª£ng theo quy·∫øt ƒë·ªãnh c·ªßa b·ªô y t·∫ø"
    }
]

export const dataHealth = [
    {
        "is_sick": false,
        "name_health": "B√¨nh th∆∞·ªùng"
    },
    {
        "is_sick": true,
        "name_health": "·ªêm"
    }
]

export const dataGender = [
    {
        "id_gender": "female",
        "name": "N·ªØ"
    },
    {
        "id_gender": "male",
        "name": "Nam"
    },
    {
        "id_gender": "other",
        "name": "Kh√°c"
    }
]

function AddPersonForm(props) {

    // d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† d·ªØ li·ªáu ƒëi·ªÉm ti√™m
    const {userInfo} = props.userInfo;
    const {dataVaccinationPlace} = props.vaccinationPlaceInfo;

    // quay tr·ªü l·∫°i trang ch·ªß
    const router = useRouter();
    const navigateHome = () => router.push("/organization/home");

    // Call api
    useEffect(() => {
        props.getAllVaccinationPlace();
    }, [])

    //d·ªØ li·ªáu kh·ªüi t·∫°o
    const [dataRegisterPerson, setDataRegisterPerson] = useState({
        value: {
            phoneNumber: "",
            nameUser: "",
            address: "",
            email: "",
            identify: "",
            insurance: "",
            gender: "male",
            dob: "",
            idPriority: 15,
            sick: false,
            note: "",
            numberInject: 1,
            idPlace: 1,
            isAccept: false,
        },
        error: {
            note: false,
        }
    })

    //register submit
    const onClickRegisterPerson = async () => {
        if (dataRegisterPerson.error.note) {
            snackActions.error('ƒêƒÉng k√Ω th·∫•t b·∫°i, vui l√≤ng ki·ªÉm tra l·∫°i');
        } else {
            const result = await props.registrationVaccinationAction(dataRegisterPerson.value)
            if (result) {
                snackActions.success('ƒêƒÉng k√Ω ti√™m th√†nh c√¥ng üéâ')
                await router.push('/organization/home')
            } else {
                snackActions.error('ƒêƒÉng k√Ω th·∫•t b·∫°i, Y√™u c·∫ßu ch·ªçn ƒë√∫ng m≈©i ti√™m ti·∫øp theo!')
            }
        }
    }

    const handleChangeGender = (event) => {
        setDataRegisterPerson(state => ({
            value: {...state.value, gender: event.target.value},
            error: {...state.error}
        }))
    }
    const handleChangeHealth = (event) => {
        setDataRegisterPerson(state => ({
            value: {...state.value, sick: event.target.value},
            error: {note: event.target.value ? true: false},
        }))
    }
    const handleChangeNote = (event) => {
        setDataRegisterPerson(state => ({
            value: {...state.value, note: event.target.value},
            error: {...state.error, note: validationInvalid(event.target.value)}
        }))
    }
    const handleAcceptRegister = (event) => {
        setDataRegisterPerson(state => ({
            value: {...state.value, isAccept: event.target.checked},
            error: {...state.error}
        }))
    }
    const handleChangeDOB = (event) => {
        let myDate = event.target.value.split('-')
        let newDate = new Date(myDate[0], myDate[1], myDate[2])
        setDataRegisterPerson(state => ({
            value: {...state.value, dob: newDate.getTime() / 1000},
            error: {...state.error}
        }))
    }

    const handleChangePriority = (event) => {
        setDataRegisterPerson(state => ({
            value: {...state.value, idPriority: event.target.value},
            error: {...state.error}
        }))
    }

    return (
        <section className="sectionPage my-12">
            <div className="xl:container mx-auto px-4">
                <div className="row">
                    <div className="font-medium mb-2">Th√¥ng tin ng∆∞·ªùi ƒëƒÉng k√Ω ti√™m</div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-4 md:gap-6">
                        <div>
                            <p className="mb-2">H·ªç v√† t√™n (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className="h-8 min-w-full xl:w-full mb-2 "
                                size="small"
                                id="outlined-disabled"
                                placeholder="H·ªç v√† t√™n"
                                variant="outlined"
                                value={dataRegisterPerson.value.nameUser}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, nameUser: event.target.value},
                                        error: {...state.error, nameUser: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />
                        </div>
                        <div>
                            <p className="mb-2">Ng√†y Sinh (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className="h-8 min-w-full xl:w-full mb-2 "
                                size="small"
                                id="date"
                                label="Ng√†y Sinh"
                                type="date"
                                value={new Date(dataRegisterPerson.value.dob * 1000).toISOString().substring(0, 10)}
                                InputLabelProps={{
                                    shrink: true,
                                }}
                                onChange={handleChangeDOB}
                            />
                        </div>
                        <div>
                            <p className="mb-2">Gi·ªõi t√≠nh (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                size="small"
                                className="min-w-full xl:w-full"
                                id="outlined-select-currency"
                                placeholder="Gi·ªõi t√≠nh"
                                select
                                onChange={handleChangeGender}
                                defaultValue={dataRegisterPerson.value.gender}
                            >
                                {dataGender.map((item, index) => (
                                    <MenuItem key={index} value={item.id_gender}>
                                        {item.name}
                                    </MenuItem>
                                ))}
                            </TextField>

                        </div>
                        <div>
                            <p className="mb-2">S·ªë ƒëi·ªán tho·∫°i (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className=" min-w-full xl:w-full"
                                size="small" id="outlined-basic"
                                variant="outlined"
                                placeholder="S·ªë ƒëi·ªán tho·∫°i"
                                value={dataRegisterPerson.value.phoneNumber}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, phoneNumber: event.target.value},
                                        error: {...state.error, phoneNumber: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />
                        </div>
                        <div>
                            <p className="mb-2">Email (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className="min-w-full xl:w-full"
                                size="small" id="outlined-basic"
                                variant="outlined"
                                placeholder="Email"
                                value={dataRegisterPerson.value.email}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, email: event.target.value},
                                        error: {...state.error, email: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />
                        </div>
                        <div>
                            <p className="mb-2">S·ªë CMND/CCCD/HC (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className="min-w-full xl:w-full"
                                size="small" id="outlined-basic"
                                variant="outlined"
                                placeholder="S·ªë CMND/CCCD/HC"
                                value={dataRegisterPerson.value.identify}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, identify: event.target.value},
                                        error: {...state.error, identify: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />
                        </div>
                        <div>
                            <p className="mb-2">S·ªë th·∫ª BHYT</p>
                            <TextField
                                className=" min-w-full xl:w-full"
                                size="small" id="outlined-basic"
                                variant="outlined"
                                placeholder="S·ªë th·∫ª BHYT"
                                value={dataRegisterPerson.value.insurance}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, insurance: event.target.value},
                                        error: {...state.error, insurance: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />

                        </div>
                        <div className="col-span-2">
                            <p className="mb-2">ƒê·ªãa ch·ªâ hi·ªán t·∫°i</p>
                            <TextField
                                className=" min-w-full xl:w-full"
                                size="small" id="outlined-basic"
                                variant="outlined"
                                placeholder="ƒê·ªãa ch·ªâ hi·ªán t·∫°i"
                                value={dataRegisterPerson.value.address}
                                onChange={(event) => {
                                    setDataRegisterPerson(state => ({
                                        value: {...state.value, address: event.target.value},
                                        error: {...state.error, address: validationInvalid(event.target.value)}
                                    }))
                                }}
                            />
                        </div>
                        <div>
                            <p className="mb-2">Nh√≥m ∆∞u ti√™n (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                size="small"
                                className="min-w-full xl:w-full"
                                id="outlined-select-currency"
                                select
                                onChange={handleChangePriority}
                                value={dataRegisterPerson.value.idPriority}
                                label="Nh√≥m ∆∞u ti√™n"
                            >
                                {dataPriorities.map((item, index) => (
                                    <MenuItem key={index} value={item.id_priority}>
                                        {item.name_priority}
                                    </MenuItem>
                                ))}
                            </TextField>
                        </div>
                        <div>
                            <p className="mb-2">T√¨nh tr·∫°ng s·ª©c kh·ªèe (<span className={RegisterStyle.asterisk}>*</span>)
                            </p>
                            <TextField
                                size="small"
                                className="min-w-full xl:w-full"
                                id="outlined-select-currency"
                                select
                                onChange={handleChangeHealth}
                                value={dataRegisterPerson.value.sick}
                                label="T√¨nh tr·∫°ng s·ª©c kh·ªèe"
                            >
                                {dataHealth.map((item, index) => (
                                    <MenuItem key={index} value={item.is_sick}>
                                        {item.name_health}
                                    </MenuItem>
                                ))}
                            </TextField>
                        </div>
                        <div>
                        {
                            !dataRegisterPerson.value.sick ? "" :
                            <div className="col-span-2">
                            <p className="mb-2">Ghi ch√∫ (<span className={RegisterStyle.asterisk}>*</span>)</p>
                            <TextField
                                className=" min-w-full xl:w-full"
                                size="small"
                                id="outlined-basic"
                                variant="outlined"
                                placeholder="Ghi ch√∫"
                                onChange={handleChangeNote}/>
                            <span className="text-red-500 text-sm">{dataRegisterPerson.error.note ? "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" : ""}</span>
                            </div>
                        }
                        </div>
                    </div>
                </div>
                <div className="mt-2">
                    <FormGroup>
                        <FormControlLabel
                            control={<Checkbox onClick={handleAcceptRegister} checked={dataRegisterPerson.value.isAccept}/>}
                            label="T√¥i ƒë·ªìng √Ω ch·ªãu tr√°ch nhi·ªám v·ªõi c√°c th√¥ng tin ƒë√£ cung c·∫•p"
                        />
                    </FormGroup>
                </div>
                <div className="mt-2 flex justify-between">
                    <Button className="mx-10" variant="outlined" onClick={navigateHome}>H·ªßy b·ªè</Button>
                    <Button className="mx-10" variant="contained" disabled={!dataRegisterPerson.value.isAccept} onClick={() => {
                        onClickRegisterPerson()
                    }}>X√°c nh·∫≠n</Button>
                </div>
            </div>
        </section>

    );
}

const mapStateToProps = (state) => ({
    userInfo: state.authReducer,
    vaccinationPlaceInfo: state.vaccinationPlaceReducer,
});

const mapDispatchToProps = {
    getAllVaccinationPlace,
    registrationVaccinationAction
};
export default connect(mapStateToProps, mapDispatchToProps)(AddPersonForm);